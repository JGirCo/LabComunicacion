
const byte alphabet[39][8] = {
  {B00000000,B00111100,B01000010,B01000010,B01000010,B01111110,B01000010,B01000010}, // A
  {B00000000,B01111100,B01000010,B01000010,B01111100,B01000010,B01000010,B01111100}, // B
  {B00000000,B00111100,B01000010,B01000000,B01000000,B01000000,B01000010,B00111100}, // C
  {B00000000,B01111100,B01000010,B01000010,B01000010,B01000010,B01000010,B01111100}, // D
  {B00000000,B01111110,B01000000,B01000000,B01111100,B01000000,B01000000,B01111110}, // E
  {B00000000,B01111110,B01000000,B01000000,B01111100,B01000000,B01000000,B01000000}, // F
  {B00000000,B00111100,B01000010,B01000000,B01001110,B01000010,B01000010,B00111110}, // G
  {B00000000,B01000010,B01000010,B01000010,B01111110,B01000010,B01000010,B01000010}, // H
  {B00000000,B01111110,B00011000,B00011000,B00011000,B00011000,B00011000,B01111110}, // I
  {B00000000,B00011110,B00000100,B00000100,B00000100,B00000100,B01000100,B00111000}, // J
  {B00000000,B01000100,B01001000,B01010000,B01100000,B01010000,B01001000,B01000100}, // K
  {B00000000,B01000000,B01000000,B01000000,B01000000,B01000000,B01000000,B01111110}, // L
  {B00000000,B01000010,B01100110,B01011010,B01000010,B01000010,B01000010,B01000010}, // M
  {B00000000,B01000010,B01000010,B01010010,B01010010,B01001010,B01001010,B01000110}, // N
  {B00000000,B00111100,B01000010,B01000010,B01000010,B01000010,B01000010,B00111100}, // O
  {B00000000,B01111100,B01000010,B01000010,B01111100,B01000000,B01000000,B01000000}, // P
  {B00000000,B00111100,B01000010,B01000010,B01000010,B01000010,B01001010,B00111010}, // Q
  {B00000000,B01111100,B01000010,B01000010,B01111100,B01000100,B01001000,B01000010}, // R
  {B00000000,B00111100,B01000010,B01000000,B00111100,B00000010,B00000010,B01000010}, // S
  {B00000000,B01111110,B00011000,B00011000,B00011000,B00011000,B00011000,B00011000}, // T
  {B00000000,B01000010,B01000010,B01000010,B01000010,B01000010,B01000010,B00111100}, // U
  {B00000000,B01000010,B01000010,B01000010,B01000010,B00100100,B00100100,B00011000}, // V
  {B00000000,B01000010,B01000010,B01000010,B01000010,B01011010,B01100110,B01000010}, // W
  {B00000000,B01000010,B01000010,B00100100,B00011000,B00011000,B00100100,B01000010}, // X
  {B00000000,B01000010,B01000010,B01000010,B00100100,B00011000,B00011000,B00011000}, // Y
  {B00000000,B01111110,B00000010,B00000100,B00001000,B00010000,B00100000,B01111110}, // Z
  {B00000000,B00111100,B01000010,B01000010,B01000010,B01000010,B01000010,B00111100}, // 0
  {B00000000,B00010000,B00110000,B00010000,B00010000,B00010000,B00010000,B00010000}, // 1
  {B00000000,B00111100,B01000010,B00000010,B00000100,B00001000,B00010000,B00111100}, // 2
  {B00000000,B00111100,B01000010,B00000010,B00001100,B00000010,B01000010,B00111100}, // 3
  {B00000000,B00000100,B00001100,B00010100,B00100100,B01111110,B00000100,B00000100}, // 4
  {B00000000,B01111110,B01000000,B01000000,B01111100,B00000010,B00000010,B01111100}, // 5
  {B00000000,B00111100,B01000010,B01000000,B01111100,B01000010,B01000010,B00111100}, // 6
  {B00000000,B01111110,B00000010,B00000100,B00001000,B00010000,B00100000,B00000000}, // 7
  {B00000000,B00111100,B01000010,B01000010,B00111100,B01000010,B01000010,B00111100}, // 8
  {B00000000,B00111100,B01000010,B01000010,B00111110,B00000010,B01000010,B00111100}, // 9
  {B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00011000,B00011000}, // .
  {B00000000,B00000000,B00000000,B00000000,B00011000,B00011000,B00000000,B00011000},  // :
  {B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000}  //
};

// };

const byte* getCharBitmap(char c) {
  const byte* originalBitmap;
  if (c >= 'A' && c <= 'Z') {
    originalBitmap = alphabet[c - 'A'];
  } else if (c >= '0' && c <= '9') {
    originalBitmap = alphabet[c - '0' + 26];
  } else if (c == '.') {
    originalBitmap = alphabet[36];
  } else if (c == ':') {
    originalBitmap = alphabet[37];
  } else if (c == ' ') {
    originalBitmap = alphabet[38];
  } else {
    // Fallback to checkboard pattern
    static const byte checkboard[8] = {
      B10101010,
      B01010101,
      B10101010,
      B01010101,
      B10101010,
      B01010101,
      B10101010,
      B01010101
    };
    return checkboard;
  }

  static byte rotatedBitmap[8];

  // Rotate the character bitmap 90 degrees clockwise
  for (int i = 0; i < 8; i++) {
    rotatedBitmap[i] = 0;
    for (int j = 0; j < 8; j++) {
      rotatedBitmap[i] |= ((originalBitmap[j] >> 7 - i) & 0x01) << (j);
    }
  }

  return rotatedBitmap;
}

